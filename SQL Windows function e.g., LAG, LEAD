#LAG() function = LAG() + OVER(ORDER BY) + AS
#LAG() = put column name that wanna show previous value
#OVER(ORDER BY) = put columan name that want the lag command to follow the order
#AS = name of the newly created column of lagged value

#Case 1 - Lag of 1 value
SELECT patient_id, city, 
	LAG(city)
	OVER(ORDER BY patient_id)
	AS lag_city
FROM patients;

#Case 2 - Lag of >1 value ex. 4 value
SELECT patient_id, city, 
	LAG(city, 4)
	OVER(ORDER BY patient_id)
	AS lag_city
FROM patients;

#LEAD() function = LEAD() + OVER(ORDER BY) + AS
#Case 1 - Lead of 1 value
SELECT patient_id, city, 
	LEAD(city)
	OVER(ORDER BY patient_id)
	AS lead_city
FROM patients;

#Case 2 - Lead of >1 value ex. 4 value
SELECT patient_id, city, 
	LEAD(city, 4)
	OVER(ORDER BY patient_id)
	AS lead_city
FROM patients;

#Show MAX value of the whole group as a column next to the full table
#this can NOT be done by GROUP BY
#OVER() is the command to put all this value across rows in the table (like for loop in Python)
#Way 1 to write: 
SELECT *,
MAX(height) OVER() AS max_height
FROM patients;

#Way 2 to write
SELECT patients.*,
MAX(height) OVER() AS max_height
FROM patients;

#Show MAX value of only each category from a selected column ex. Max value for Male and Female column****
#PARTITION BY = to tell OVER which column of category we want to calculate max value from
**Very similar to Group BY function but the different is that we do not mush the data
# can alo use MIN() SUM() COUNT()
SELECT *,
MAX(height) OVER(PARTITION BY gender) AS max_height
FROM patients;

#Assign rankinh number for only each value from categorical column = use row_number() + ORDER(PARTITION BY) + AS
#count 1, 2, 3 for each category, if start new category then number will start at 1 again
SELECT *, 
ROW_NUMBER() OVER(PARTITION BY gender) AS 
FROM patients;

