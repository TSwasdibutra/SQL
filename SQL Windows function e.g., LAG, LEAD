#LAG() function = LAG() + OVER(ORDER BY) + AS
#LAG() = put column name that wanna show previous value
#OVER(ORDER BY) = put colum n name that want the lag command to follow the order
#AS = name of the newly created column of lagged value

#Case 1 - Lag of 1 value
SELECT patient_id, city, 
	LAG(city)
	OVER(ORDER BY patient_id)
	AS lag_city
FROM patients;

#Case 2 - Lag of >1 value ex. 4 value
SELECT patient_id, city, 
	LAG(city, 4)
	OVER(ORDER BY patient_id)
	AS lag_city
FROM patients;

#LEAD() function = LEAD() + OVER(ORDER BY) + AS
#Case 1 - Lead of 1 value
SELECT patient_id, city, 
	LEAD(city)
	OVER(ORDER BY patient_id)
	AS lead_city
FROM patients;

#Case 2 - Lead of >1 value ex. 4 value
SELECT patient_id, city, 
	LEAD(city, 4)
	OVER(ORDER BY patient_id)
	AS lead_city
FROM patients;

#Case 3 = get LAG value for each city
********PARTITION BY คือให้เริ่มนับ LAG ใหม่ตามค่าใน column ที่ใส่ใน PARTITION BY*******
SELECT *, 
LAG(weight) OVER(PARTITION BY city ORDER BY patient_id) AS lag_weight
FROM patients;

#Case 4 = want to put 0 for NULL value
SELECT *, 
LAG(weight, 1, 0) OVER(PARTITION BY city ORDER BY patient_id) AS lag_weight
FROM patients;
*****1 คือจำนวน Lag ส่วน 0 คือค่าที่อยากให้ใส่แทน NULL 

#Interview question for LAG() and LEAD() - fetch a query to display if the height of people is higher, lower, or equal to the previous people.
#This is using LAG() with CASE WHEN
*********Will face this question for sure
WITH cte AS 
(
SELECT *, 
LAG(weight, 1, 0) OVER(PARTITION BY city ORDER BY patient_id) AS lag_weight
FROM patients
)

SELECT *,
CASE WHEN weight > lag_weight THEN 'higher'
	WHEN weight < lag_weight THEN 'lower'
    WHEN weight = lag_weight THEN 'equal'
	ELSE 'nani?'
	END AS compare
FROM cte;


#Show MAX value of the whole group as a column next to the full table
#this can NOT be done by GROUP BY
#OVER() is the command to put all this value across rows in the table (like for loop in Python)
#Way 1 to write: 
SELECT *,
MAX(height) OVER() AS max_height
FROM patients;

***No need to put ORDER BY in OVER() because MAX(height) is a single value so NO need to order the value based on anything

#Way 2 to write
SELECT patients.*,
MAX(height) OVER() AS max_height
FROM patients;

#Show MAX value of only each category from a selected column ex. Max value for Male and Female column****
#PARTITION BY = to tell OVER which column of category we want to calculate max value from
**Very similar to Group BY function but the different is that we do not mush the data
# can alo use MIN() SUM() COUNT()
SELECT *,
MAX(height) OVER(PARTITION BY gender) AS max_height
FROM patients;

#Assign ranking number for only each value from categorical column = use row_number() + ORDER(PARTITION BY) + AS
#count 1, 2, 3 for each category, if start new category then number will start at 1 again
SELECT *, 
ROW_NUMBER() OVER(PARTITION BY gender) AS gender_number
FROM patients;

#Same command from above but sort the data by adding ORDER BY**********
SELECT *, 
ROW_NUMBER() OVER(PARTITION BY gender ORDER BY patient_id) AS gender_number
FROM patients;

#Fetch first 2 employees from each city = Use ROW_NUMBER() + OVER(PATRITION BY) + AS with CTE
WITH cte AS 
(SELECT *, 
ROW_NUMBER() OVER(PARTITION BY city ORDER BY patient_id) AS city_number
FROM patients
)

SELECT *
FROM cte
WHERE city_number <= 2;

#Fetch top 3 people from each city having highest wage = using RANK() function ********** this questino will come for sure
WITH cte AS 
(
SELECT *,
RANK() OVER(PARTITION BY city ORDER BY height DESC) AS ranking
FROM patients
 )
 
SELECT *
FROM cte
WHERE ranking < 4;

**DENSE_RANK() คล้าย RANK() ทุกอย่าง แค่จะไม่ slip value เวลามีค่าซ้ำกัน 
WITH cte AS 
(
SELECT *,
DENSE_RANK() OVER(PARTITION BY city ORDER BY height DESC) AS d_ranking
FROM patients
 )
 
SELECT *
FROM cte
WHERE d_ranking < 4;

********NO need to put value within RANK() DENSE_RANK() ROW_NUMBER()
********LEAD() LAG() RANK() DENSE_RANK() ROW_NUMBER() ต้องอยู่ใน SELECT เท่านั้น
********PARTITION BY() คือทำหน้าที่เป็นตัวบอกว่าจะให้รันคำสั่งเช่น LAG() ภายใน category value นึง แล้วเริ่มนับหนึ่งใหม่เมื่อขึ้น category value ใหม่


